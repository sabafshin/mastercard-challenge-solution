{
  "openapi": "3.1.0",
  "info": {
    "title": "Accounts API",
    "description": "A simple accounts management API",
    "version": "1.0.0"
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Enhanced Kubernetes health check endpoint with dependency validation.\n\nReturns service health status, timestamp, and version information.\nIncludes basic repository connectivity check.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Create Account",
        "description": "Create a new account.\n\nThe server assigns a unique ID to the new account.",
        "operationId": "create_account_accounts_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "List Accounts",
        "description": "List all accounts.\n\nOptionally filter by active status using the 'active_only' query parameter.",
        "operationId": "list_accounts_accounts_get",
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Active Only"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponse"
                  },
                  "title": "Response List Accounts Accounts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{account_id}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get Account",
        "description": "Get a specific account by ID.\n\nReturns 404 if account is not found.",
        "operationId": "get_account_accounts__account_id__get",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Update Account",
        "description": "Update an existing account (full replacement).\n\nAll fields must be provided. Returns 404 if account is not found.",
        "operationId": "update_account_accounts__account_id__put",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "accounts"
        ],
        "summary": "Partial Update Account",
        "description": "Partially update an existing account.\n\nOnly provided fields will be updated. Returns 404 if account is not found.",
        "operationId": "partial_update_account_accounts__account_id__patch",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "Delete Account",
        "description": "Delete an account.\n\nReturns 204 No Content on successful deletion.\nReturns 404 if account is not found.",
        "operationId": "delete_account_accounts__account_id__delete",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name",
            "description": "Account name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Account description"
          },
          "balance": {
            "type": "number",
            "minimum": 0.0,
            "title": "Balance",
            "description": "Account balance (non-negative)"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Account active status",
            "default": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "balance"
        ],
        "title": "Account",
        "description": "Base Account model for API operations"
      },
      "AccountCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name",
            "description": "Account name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Account description"
          },
          "balance": {
            "type": "number",
            "minimum": 0.0,
            "title": "Balance",
            "description": "Account balance (non-negative)"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Account active status",
            "default": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "balance"
        ],
        "title": "AccountCreate",
        "description": "Model for creating new accounts"
      },
      "AccountResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name",
            "description": "Account name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Account description"
          },
          "balance": {
            "type": "number",
            "minimum": 0.0,
            "title": "Balance",
            "description": "Account balance (non-negative)"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Account active status",
            "default": true
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Unique account identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Account creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Account last update timestamp"
          },
          "display_balance": {
            "type": "string",
            "title": "Display Balance",
            "description": "Format balance for display with proper currency formatting",
            "readOnly": true
          },
          "age_days": {
            "type": "integer",
            "title": "Age Days",
            "description": "Calculate account age in days",
            "readOnly": true
          },
          "status_description": {
            "type": "string",
            "title": "Status Description",
            "description": "Provide human-readable status description",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "balance",
          "id",
          "created_at",
          "updated_at",
          "display_balance",
          "age_days",
          "status_description"
        ],
        "title": "AccountResponse",
        "description": "Model for account API responses"
      },
      "AccountUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "balance": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Balance"
          },
          "active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "AccountUpdate",
        "description": "Model for partial account updates"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "unhealthy"
            ],
            "title": "Status",
            "description": "Service status"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp",
            "description": "ISO 8601 timestamp"
          },
          "service": {
            "type": "string",
            "title": "Service",
            "description": "Service name"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Service version"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "service",
          "version"
        ],
        "title": "HealthResponse",
        "description": "Health check response model"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}